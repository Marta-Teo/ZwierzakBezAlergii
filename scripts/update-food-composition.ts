/**
 * Uniwersalny skrypt do aktualizacji sk≈Çadu karm
 * 
 * U≈ºycie:
 *   npm run food:update "Nazwa karmy" "Sk≈Çadniki oddzielone przecinkami"
 * 
 * Przyk≈Çad:
 *   npm run food:update "Brit Care Adult Jagniƒôcina z Ry≈ºem" "suszona jagniƒôcina (42%), ry≈º (35%), t≈Çuszcz z kurczaka"
 */

import { createClient } from '@supabase/supabase-js';
import type { Database } from '../src/db/database.types';

const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_KEY;

if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
  console.error('‚ùå B≈ÇƒÖd: Brak wymaganych zmiennych ≈õrodowiskowych!');
  console.error('Upewnij siƒô, ≈ºe masz plik .env z SUPABASE_URL i SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

// Mapowanie sk≈Çadnik√≥w na alergeny
// Format: 'sk≈Çadnik' -> ['g≈Ç√≥wny alergen', 'kategoria']
const ALLERGEN_MAPPING: Record<string, { allergen?: string; category?: number; categoryName?: string }> = {
  // MIƒòSO (kategoria 1)
  'jagniƒôcina': { allergen: 'jagniƒôcina', category: 1 },
  'suszona jagniƒôcina': { allergen: 'jagniƒôcina', category: 1 },
  '≈õwie≈ºa jagniƒôcina': { allergen: 'jagniƒôcina', category: 1 },
  'mƒÖczka z jagniƒôciny': { allergen: 'jagniƒôcina', category: 1 },
  'wo≈Çowina': { allergen: 'wo≈Çowina', category: 1 },
  '≈õwie≈ºa wo≈Çowina': { allergen: 'wo≈Çowina', category: 1 },
  'suszone miƒôso wo≈Çowe': { allergen: 'wo≈Çowina', category: 1 },
  'mƒÖczka wo≈Çowa': { allergen: 'wo≈Çowina', category: 1 },
  'wieprzowina': { allergen: 'wieprzowina', category: 1 },
  'dzik': { allergen: 'dzik', category: 1 },
  'dziczyzna': { allergen: 'dziczyzna', category: 1 },
  'jele≈Ñ': { allergen: 'jele≈Ñ', category: 1 },
  'renifer': { allergen: 'renifer', category: 1 },
  'kangur': { allergen: 'kangur', category: 1 },
  'kr√≥lik': { allergen: 'kr√≥lik', category: 1 },
  'ko≈Ñ': { allergen: 'ko≈Ñ', category: 1 },
  
  // DR√ìB (kategoria 2)
  'kurczak': { allergen: 'kurczak', category: 2 },
  'miƒôso z kurczaka': { allergen: 'kurczak', category: 2 },
  '≈õwie≈ºy kurczak': { allergen: 'kurczak', category: 2 },
  'suszone miƒôso z kurczaka': { allergen: 'kurczak', category: 2 },
  'mƒÖczka z kurczaka': { allergen: 'kurczak', category: 2 },
  't≈Çuszcz z kurczaka': { allergen: 'kurczak', category: 2 },
  't≈Çuszcz drobiowy': { allergen: 'kurczak', category: 2 },
  'indyk': { allergen: 'indyk', category: 2 },
  'miƒôso z indyka': { allergen: 'indyk', category: 2 },
  'mƒÖczka z indyka': { allergen: 'indyk', category: 2 },
  'kaczka': { allergen: 'kaczka', category: 2 },
  'miƒôso z kaczki': { allergen: 'kaczka', category: 2 },
  'gƒô≈õ': { allergen: 'gƒô≈õ', category: 2 },
  'przepi√≥rka': { allergen: 'przepi√≥rka', category: 2 },
  
  // RYBY (kategoria 3)
  '≈Çoso≈õ': { allergen: '≈Çoso≈õ', category: 3 },
  '≈õwie≈ºy ≈Çoso≈õ': { allergen: '≈Çoso≈õ', category: 3 },
  'mƒÖczka z ≈Çososia': { allergen: '≈Çoso≈õ', category: 3 },
  'dehydratyzowany ≈Çoso≈õ': { allergen: '≈Çoso≈õ', category: 3 },
  'olej z ≈Çososia': { allergen: '≈Çoso≈õ', category: 3 },
  'olej z ryb': { category: 3 }, // og√≥lne
  'pstrƒÖg': { allergen: 'pstrƒÖg', category: 3 },
  '≈õled≈∫': { allergen: '≈õled≈∫', category: 3 },
  'sardynka': { allergen: 'sardynka', category: 3 },
  'dorsz': { allergen: 'dorsz', category: 3 },
  'tu≈Ñczyk': { allergen: 'tu≈Ñczyk', category: 3 },
  'makrela': { allergen: 'makrela', category: 3 },
  'bia≈Ça ryba': { allergen: 'bia≈Ça ryba', category: 3 },
  
  // ZBO≈ªA (kategoria 4)
  'pszenica': { allergen: 'pszenica', category: 4 },
  'mƒÖka pszenna': { allergen: 'pszenica', category: 4 },
  'gluten pszenny': { allergen: 'pszenica', category: 4 },
  'kukurydza': { allergen: 'kukurydza', category: 4 },
  'mƒÖka kukurydziana': { allergen: 'kukurydza', category: 4 },
  'jƒôczmie≈Ñ': { allergen: 'jƒôczmie≈Ñ', category: 4 },
  'owies': { allergen: 'owies', category: 4 },
  'ry≈º': { allergen: 'ry≈º', category: 4 },
  'ry≈º brƒÖzowy': { allergen: 'ry≈º', category: 4 },
  'ry≈º bia≈Çy': { allergen: 'ry≈º', category: 4 },
  'sorgo': { allergen: 'sorgo', category: 4 },
  'proso': { allergen: 'proso', category: 4 },
  
  // NABIA≈Å (kategoria 5)
  'mleko': { allergen: 'mleko', category: 5 },
  'ser': { allergen: 'ser', category: 5 },
  'twar√≥g': { allergen: 'twar√≥g', category: 5 },
  'jogurt': { allergen: 'jogurt', category: 5 },
  'serwatka': { allergen: 'serwatka', category: 5 },
  
  // STRƒÑCZKOWE (kategoria 6)
  'groszek': { allergen: 'groszek', category: 6 },
  'groch': { allergen: 'groch', category: 6 },
  '≈º√≥≈Çty groszek': { allergen: 'groch', category: 6 },
  'bia≈Çko grochu': { allergen: 'groch', category: 6 },
  'mƒÖczka grochowa': { allergen: 'groch', category: 6 },
  'soczewica': { allergen: 'soczewica', category: 6 },
  'ciecierzyca': { allergen: 'ciecierzyca', category: 6 },
  'fasola': { allergen: 'fasola', category: 6 },
  'b√≥b': { allergen: 'b√≥b', category: 6 },
  'soja': { allergen: 'soja', category: 6 },
  
  // JAJA (kategoria 7)
  'jaja': { category: 7 },
  'ca≈Çe jaja': { category: 7 },
  'jajka w proszku': { category: 7 },
};

/**
 * Parsuje sk≈Çadniki z textu (usuwa procenty i ilo≈õci)
 */
function parseIngredients(ingredientsRaw: string): string[] {
  // Rozdziel po przecinkach
  const parts = ingredientsRaw.split(',').map(s => s.trim());
  
  const ingredients: string[] = [];
  
  for (const part of parts) {
    // Usu≈Ñ procenty w nawiasach: "suszona jagniƒôcina (42%)" -> "suszona jagniƒôcina"
    let cleaned = part.replace(/\s*\([0-9.,]+%?\)/g, '');
    
    // Usu≈Ñ ilo≈õci z jednostkami: "glukozamina (300 mg/kg)" -> "glukozamina"
    cleaned = cleaned.replace(/\s*\([0-9]+\s*mg\/kg\)/g, '');
    cleaned = cleaned.replace(/\s*\([0-9]+x[0-9]+\s*[^)]*\)/g, '');
    
    // Dodatkowe czyszczenie
    cleaned = cleaned.trim().toLowerCase();
    
    // Specjalne przypadki z d≈Çugimi nazwami
    if (cleaned.includes('fruktooligosacharydy') || cleaned.includes('fos')) {
      ingredients.push('FOS (fruktooligosacharydy)');
    } else if (cleaned.includes('mannanoligosacharydy') || cleaned.includes('mannan-oligosacharydy') || cleaned.includes('mos')) {
      ingredients.push('MOS (mannanoligosacharydy)');
    } else if (cleaned.includes('beta-glukan') || cleaned.includes('Œ≤-glukan')) {
      ingredients.push('beta-glukany');
    } else if (cleaned.includes('dro≈ºd≈ºe piwowarskie') || cleaned.includes('dro≈ºd≈ºe piwne')) {
      ingredients.push('dro≈ºd≈ºe piwne');
    } else if (cleaned.includes('hydrolizowane bia≈Çko')) {
      if (cleaned.includes('≈Çoso≈õ') || cleaned.includes('ryb')) {
        ingredients.push('hydrolizowane bia≈Çko rybne');
      } else if (cleaned.includes('drob')) {
        ingredients.push('hydrolizowane bia≈Çko drobiowe');
      } else {
        ingredients.push(cleaned);
      }
    } else if (cleaned.includes('probiotyk') || cleaned.includes('lactobacillus')) {
      ingredients.push('probiotyki');
    } else if (cleaned.includes('chondroityn')) {
      if (cleaned.includes('siarczan')) {
        ingredients.push('siarczan chondroityny');
      } else {
        ingredients.push('chondroityna');
      }
    } else if (cleaned.includes('jukka') || cleaned.includes('yucca')) {
      ingredients.push('jukka');
    } else if (cleaned.includes('ostropest')) {
      ingredients.push('ostropest plamisty');
    } else if (cleaned) {
      ingredients.push(cleaned);
    }
  }
  
  return [...new Set(ingredients)]; // usu≈Ñ duplikaty
}

/**
 * G≈Ç√≥wna funkcja aktualizacji
 */
async function updateFoodComposition(foodName: string, ingredientsRaw: string) {
  console.log('üöÄ Rozpoczynam aktualizacjƒô karmy...');
  console.log(`üì¶ Karma: ${foodName}`);
  console.log(`üìù Sk≈Çadniki: ${ingredientsRaw.substring(0, 100)}...`);
  console.log('');

  try {
    // 1. Znajd≈∫ karmƒô w bazie
    console.log('üîç Szukam karmy w bazie...');
    const { data: food, error: foodError } = await supabase
      .from('foods')
      .select('id, name')
      .eq('name', foodName)
      .single();
    
    if (foodError || !food) {
      console.error(`‚ùå Nie znaleziono karmy o nazwie: "${foodName}"`);
      console.log('\nüí° Dostƒôpne karmy w bazie:');
      const { data: allFoods } = await supabase.from('foods').select('name').order('name');
      allFoods?.forEach(f => console.log(`   - ${f.name}`));
      process.exit(1);
    }
    
    console.log(`  ‚úÖ Znaleziono: ${food.name} (ID: ${food.id})`);

    // 2. Parsuj sk≈Çadniki
    console.log('\nüìã Parsujƒô sk≈Çadniki...');
    const parsedIngredients = parseIngredients(ingredientsRaw);
    console.log(`  ‚úÖ Znaleziono ${parsedIngredients.length} sk≈Çadnik√≥w`);
    parsedIngredients.slice(0, 5).forEach(ing => console.log(`     - ${ing}`));
    if (parsedIngredients.length > 5) {
      console.log(`     ... i ${parsedIngredients.length - 5} wiƒôcej`);
    }

    // 3. Sprawd≈∫ kt√≥re sk≈Çadniki ju≈º istniejƒÖ
    console.log('\nüîç Sprawdzam kt√≥re sk≈Çadniki ju≈º istniejƒÖ w bazie...');
    const { data: existingIngredients } = await supabase
      .from('ingredients')
      .select('id, name');
    
    const existingNames = new Set(existingIngredients?.map(i => i.name.toLowerCase()) || []);
    const newIngredients = parsedIngredients.filter(ing => !existingNames.has(ing));
    
    if (newIngredients.length > 0) {
      console.log(`  üì¶ Dodajƒô ${newIngredients.length} nowych sk≈Çadnik√≥w...`);
      const { data: inserted, error: insertError } = await supabase
        .from('ingredients')
        .insert(newIngredients.map(name => ({ name })))
        .select();
      
      if (insertError) throw insertError;
      inserted?.forEach(ing => console.log(`     + ${ing.name} (ID: ${ing.id})`));
    } else {
      console.log('  ‚ÑπÔ∏è  Wszystkie sk≈Çadniki ju≈º istniejƒÖ w bazie');
    }

    // 4. Pobierz wszystkie sk≈Çadniki z bazy (≈õwie≈ºe dane)
    const { data: allIngredients } = await supabase
      .from('ingredients')
      .select('id, name')
      .in('name', parsedIngredients);

    if (!allIngredients || allIngredients.length === 0) {
      console.error('‚ùå Nie znaleziono sk≈Çadnik√≥w w bazie');
      process.exit(1);
    }

    // 5. Dodaj powiƒÖzania sk≈Çadnik-alergen
    console.log('\nüîó Dodajƒô powiƒÖzania sk≈Çadnik-alergen...');
    let allergenMappingsAdded = 0;
    
    for (const ingredient of allIngredients) {
      const mapping = ALLERGEN_MAPPING[ingredient.name.toLowerCase()];
      if (!mapping) continue;

      const mappingsToAdd: Array<{ ingredient_id: number; allergen_id: number }> = [];

      // Dodaj konkretny alergen
      if (mapping.allergen) {
        const { data: allergen } = await supabase
          .from('allergens')
          .select('id')
          .eq('name', mapping.allergen)
          .maybeSingle();
        
        if (allergen) {
          mappingsToAdd.push({ ingredient_id: ingredient.id, allergen_id: allergen.id });
        }
      }

      // Dodaj kategoriƒô
      if (mapping.category) {
        mappingsToAdd.push({ ingredient_id: ingredient.id, allergen_id: mapping.category });
      }

      if (mappingsToAdd.length > 0) {
        await supabase
          .from('ingredient_allergens')
          .upsert(mappingsToAdd, { onConflict: 'ingredient_id,allergen_id' });
        allergenMappingsAdded += mappingsToAdd.length;
      }
    }
    
    console.log(`  ‚úÖ Dodano/zaktualizowano ${allergenMappingsAdded} powiƒÖza≈Ñ z alergenami`);

    // 6. Zaktualizuj sk≈Çad karmy
    console.log('\nüìù Aktualizujƒô sk≈Çad karmy...');
    const { error: updateError } = await supabase
      .from('foods')
      .update({ ingredients_raw: ingredientsRaw })
      .eq('id', food.id);
    
    if (updateError) throw updateError;
    console.log('  ‚úÖ Zaktualizowano ingredients_raw');

    // 7. Usu≈Ñ stare powiƒÖzania karma-sk≈Çadnik
    console.log('\nüóëÔ∏è  Usuwam stare powiƒÖzania karma-sk≈Çadnik...');
    const { error: deleteError } = await supabase
      .from('food_ingredients')
      .delete()
      .eq('food_id', food.id);
    
    if (deleteError) throw deleteError;
    console.log('  ‚úÖ Usuniƒôto stare powiƒÖzania');

    // 8. Dodaj nowe powiƒÖzania karma-sk≈Çadnik
    console.log('\nüîó Dodajƒô nowe powiƒÖzania karma-sk≈Çadnik...');
    const foodIngredients = allIngredients.map(ing => ({
      food_id: food.id,
      ingredient_id: ing.id
    }));
    
    const { error: insertFoodIngError } = await supabase
      .from('food_ingredients')
      .insert(foodIngredients);
    
    if (insertFoodIngError) throw insertFoodIngError;
    console.log(`  ‚úÖ Dodano ${foodIngredients.length} powiƒÖza≈Ñ`);

    // 9. Podsumowanie
    console.log('\n‚úÖ Aktualizacja zako≈Ñczona pomy≈õlnie!');
    console.log('\nüìä Podsumowanie:');
    console.log(`   - Karma: ${food.name}`);
    console.log(`   - Nowych sk≈Çadnik√≥w: ${newIngredients.length}`);
    console.log(`   - Wszystkich sk≈Çadnik√≥w w karmie: ${allIngredients.length}`);
    console.log(`   - PowiƒÖza≈Ñ z alergenami: ${allergenMappingsAdded}`);
    console.log('\nüí° Uruchom: npm run db:export aby zapisaƒá zmiany do seed.sql');

  } catch (error) {
    console.error('\n‚ùå B≈ÇƒÖd podczas aktualizacji:', error);
    process.exit(1);
  }
}

// Obs≈Çuga argument√≥w z linii komend
const args = process.argv.slice(2);

if (args.length < 2) {
  console.log('‚ùå B≈ÇƒÖd: Nieprawid≈Çowa liczba argument√≥w\n');
  console.log('U≈ºycie:');
  console.log('  npm run food:update "Nazwa karmy" "Sk≈Çadniki"\n');
  console.log('Przyk≈Çad:');
  console.log('  npm run food:update "Brit Care Adult Jagniƒôcina z Ry≈ºem" "suszona jagniƒôcina (42%), ry≈º (35%), t≈Çuszcz z kurczaka"');
  process.exit(1);
}

const [foodName, ingredientsRaw] = args;
updateFoodComposition(foodName, ingredientsRaw);

